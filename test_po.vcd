$date
	Thu Aug 29 22:29:24 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_po $end
$var wire 32 ! po_out [31:0] $end
$var reg 3 " alpha_alu2 [2:0] $end
$var reg 3 # alpha_alu3 [2:0] $end
$var reg 3 $ alpha_alu4 [2:0] $end
$var reg 1 % alpha_k1 $end
$var reg 1 & alpha_k2 $end
$var reg 1 ' alpha_k3 $end
$var reg 1 ( alpha_k4 $end
$var reg 1 ) alpha_k5 $end
$var reg 1 * alpha_k_dataout $end
$var reg 1 + alpha_k_esito $end
$var reg 1 , alpha_k_i $end
$var reg 1 - alpha_k_ind $end
$var reg 1 . alpha_k_mem1 $end
$var reg 1 / alpha_k_mem2 $end
$var reg 1 0 beta_datain $end
$var reg 1 1 beta_dataout $end
$var reg 1 2 beta_esito $end
$var reg 1 3 beta_hd $end
$var reg 1 4 beta_i $end
$var reg 1 5 beta_ind $end
$var reg 1 6 beta_mem $end
$var reg 1 7 clock $end
$var reg 32 8 datain [31:0] $end
$var reg 10 9 n [9:0] $end
$scope module parte_operativa $end
$var wire 3 : alpha_alu2 [2:0] $end
$var wire 3 ; alpha_alu3 [2:0] $end
$var wire 3 < alpha_alu4 [2:0] $end
$var wire 1 % alpha_k1 $end
$var wire 1 & alpha_k2 $end
$var wire 1 ' alpha_k3 $end
$var wire 1 ( alpha_k4 $end
$var wire 1 ) alpha_k5 $end
$var wire 1 * alpha_k_dataout $end
$var wire 1 + alpha_k_esito $end
$var wire 1 , alpha_k_i $end
$var wire 1 - alpha_k_ind $end
$var wire 1 . alpha_k_mem1 $end
$var wire 1 / alpha_k_mem2 $end
$var wire 1 0 beta_datain $end
$var wire 1 1 beta_dataout $end
$var wire 1 2 beta_esito $end
$var wire 1 3 beta_hd $end
$var wire 1 4 beta_i $end
$var wire 1 5 beta_ind $end
$var wire 1 6 beta_mem $end
$var wire 1 = beta_n $end
$var wire 1 7 clock $end
$var wire 32 > datain_val [31:0] $end
$var wire 10 ? n_val [9:0] $end
$var wire 32 @ out [31:0] $end
$var wire 10 A n_out [9:0] $end
$var wire 32 B mem_out2 [31:0] $end
$var wire 32 C mem_out1 [31:0] $end
$var wire 11 D k_mem2_out [10:0] $end
$var wire 11 E k_mem1_out [10:0] $end
$var wire 10 F k_ind_out [9:0] $end
$var wire 10 G k_i_out [9:0] $end
$var wire 1 H k_esito_out $end
$var wire 32 I k_dataout_out [31:0] $end
$var wire 11 J k5_out [10:0] $end
$var wire 11 K k4_out [10:0] $end
$var wire 11 L k3_out [10:0] $end
$var wire 32 M k2_out [31:0] $end
$var wire 32 N k1_out [31:0] $end
$var wire 10 O ind_out [9:0] $end
$var wire 10 P i_out [9:0] $end
$var wire 11 Q hd_out [10:0] $end
$var wire 1 R esito_out $end
$var wire 32 S dataout_out [31:0] $end
$var wire 32 T datain_out [31:0] $end
$var wire 1 U alu4_segno $end
$var wire 32 V alu4_out [31:0] $end
$var wire 1 W alu3_segno $end
$var wire 32 X alu3_out [31:0] $end
$var wire 1 Y alu2_segno $end
$var wire 32 Z alu2_out [31:0] $end
$scope module alu2 $end
$var wire 3 [ alpha [2:0] $end
$var wire 32 \ y [31:0] $end
$var wire 32 ] x [31:0] $end
$var reg 1 Y segno $end
$var reg 32 ^ z [31:0] $end
$upscope $end
$scope module alu3 $end
$var wire 3 _ alpha [2:0] $end
$var wire 32 ` x [31:0] $end
$var wire 32 a y [31:0] $end
$var reg 1 W segno $end
$var reg 32 b z [31:0] $end
$upscope $end
$scope module alu4 $end
$var wire 3 c alpha [2:0] $end
$var wire 32 d x [31:0] $end
$var wire 32 e y [31:0] $end
$var reg 1 U segno $end
$var reg 32 f z [31:0] $end
$upscope $end
$scope module datain $end
$var wire 1 0 beta $end
$var wire 1 7 clock $end
$var wire 32 g in [31:0] $end
$var wire 32 h out [31:0] $end
$var reg 32 i val [31:0] $end
$upscope $end
$scope module dataout $end
$var wire 1 1 beta $end
$var wire 1 7 clock $end
$var wire 32 j out [31:0] $end
$var wire 32 k in [31:0] $end
$var reg 32 l val [31:0] $end
$upscope $end
$scope module esito $end
$var wire 1 2 beta $end
$var wire 1 7 clock $end
$var wire 3 m in [2:0] $end
$var wire 3 n out [2:0] $end
$var reg 3 o val [2:0] $end
$upscope $end
$scope module hd $end
$var wire 1 3 beta $end
$var wire 1 7 clock $end
$var wire 11 p in [10:0] $end
$var wire 11 q out [10:0] $end
$var reg 11 r val [10:0] $end
$upscope $end
$scope module i $end
$var wire 1 4 beta $end
$var wire 1 7 clock $end
$var wire 10 s out [9:0] $end
$var wire 10 t in [9:0] $end
$var reg 10 u val [9:0] $end
$upscope $end
$scope module ind $end
$var wire 1 5 beta $end
$var wire 1 7 clock $end
$var wire 10 v out [9:0] $end
$var wire 10 w in [9:0] $end
$var reg 10 x val [9:0] $end
$upscope $end
$scope module k1 $end
$var wire 1 % alpha $end
$var wire 32 y x2 [31:0] $end
$var wire 32 z x1 [31:0] $end
$var wire 32 { out [31:0] $end
$upscope $end
$scope module k2 $end
$var wire 1 & alpha $end
$var wire 32 | x2 [31:0] $end
$var wire 32 } x1 [31:0] $end
$var wire 32 ~ out [31:0] $end
$upscope $end
$scope module k3 $end
$var wire 1 ' alpha $end
$var wire 11 !" x1 [10:0] $end
$var wire 11 "" x2 [10:0] $end
$var wire 11 #" out [10:0] $end
$upscope $end
$scope module k4 $end
$var wire 1 ( alpha $end
$var wire 11 $" x1 [10:0] $end
$var wire 11 %" x2 [10:0] $end
$var wire 11 &" out [10:0] $end
$upscope $end
$scope module k5 $end
$var wire 1 ) alpha $end
$var wire 11 '" x1 [10:0] $end
$var wire 11 (" x2 [10:0] $end
$var wire 11 )" out [10:0] $end
$upscope $end
$scope module k_dataout $end
$var wire 1 * alpha $end
$var wire 32 *" x2 [31:0] $end
$var wire 32 +" x1 [31:0] $end
$var wire 32 ," out [31:0] $end
$upscope $end
$scope module k_esito $end
$var wire 1 + alpha $end
$var wire 1 -" x1 $end
$var wire 1 ." x2 $end
$var wire 1 H out $end
$upscope $end
$scope module k_i $end
$var wire 1 , alpha $end
$var wire 10 /" x1 [9:0] $end
$var wire 10 0" x2 [9:0] $end
$var wire 10 1" out [9:0] $end
$upscope $end
$scope module k_ind $end
$var wire 1 - alpha $end
$var wire 10 2" x1 [9:0] $end
$var wire 10 3" x2 [9:0] $end
$var wire 10 4" out [9:0] $end
$upscope $end
$scope module k_mem1 $end
$var wire 1 . alpha $end
$var wire 11 5" x1 [10:0] $end
$var wire 11 6" x2 [10:0] $end
$var wire 11 7" out [10:0] $end
$upscope $end
$scope module k_mem2 $end
$var wire 1 / alpha $end
$var wire 11 8" x1 [10:0] $end
$var wire 11 9" x2 [10:0] $end
$var wire 11 :" out [10:0] $end
$upscope $end
$scope module mem $end
$var wire 1 6 beta $end
$var wire 1 7 clock $end
$var wire 32 ;" in [31:0] $end
$var wire 10 <" ind1 [9:0] $end
$var wire 10 =" ind2 [9:0] $end
$var wire 32 >" out1 [31:0] $end
$var wire 32 ?" out2 [31:0] $end
$var integer 32 @" i [31:0] $end
$upscope $end
$scope module n $end
$var wire 1 = beta $end
$var wire 1 7 clock $end
$var wire 10 A" in [9:0] $end
$var wire 10 B" out [9:0] $end
$var reg 10 C" val [9:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 C"
b0 B"
b0 A"
b10000000000 @"
bx ?"
bx >"
bx ="
bx <"
b0 ;"
bx :"
b0 9"
bx 8"
bx 7"
bx 6"
b0 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
b1 /"
1."
0-"
bx ,"
bx +"
bx *"
bx )"
b10 ("
b1 '"
bx &"
b0 %"
b0 $"
bx #"
b0 ""
b0 !"
bx ~
bx }
b0 |
bx {
bx z
b0 y
b0 x
bx w
b0 v
b0 u
bx t
b0 s
b0 r
b0 q
bx p
b0 o
b0 n
b0x m
b0 l
bx k
b0 j
b0 i
b0 h
b0 g
bx f
b0xxxxxxxxxxx e
b0xxxxxxxxxxx d
b0 c
bx b
b1 a
b0xxxxxxxxxxx `
b0 _
bx ^
bx ]
bx \
b0 [
bx Z
xY
bx X
xW
bx V
xU
b0 T
b0 S
0R
b0 Q
b0 P
b0 O
bx N
bx M
bx L
bx K
bx J
bx I
xH
bx G
bx F
bx E
bx D
bx C
bx B
b0 A
b0 @
b0 ?
b0 >
z=
b0 <
b0 ;
b0 :
b0 9
b0 8
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
b0 $
b0 #
b0 "
b0 !
$end
#2
b0 <"
b0 E
b0 7"
b1 G
b1 t
b1 1"
b0 d
b0 K
b0 &"
b0 `
b0 L
b0 #"
b0 m
0H
b1 e
b1 J
b1 )"
#10
b1 8"
b1 0"
b1 2"
b1 6"
b1 3"
b1 p
b0 C
b0 z
b0 +"
b0 >"
0U
b1 V
b1 f
0W
b1 X
b1 b
#12
b1 ="
b1 D
b1 :"
b1 F
b1 w
b1 4"
b0 I
b0 k
b0 ,"
b0 N
b0 ]
b0 {
#20
10
b1010 8
b1010 >
b1010 g
16
b0 B
b0 }
b0 ?"
#22
b0 M
b0 \
b0 ~
#32
0Y
b0 Z
b0 ^
b0 *"
#40
17
#41
b1010 T
b1010 h
b1010 ;"
b1010 i
07
#49
b1010 C
b1010 z
b1010 +"
b1010 >"
#51
b1010 I
b1010 k
b1010 ,"
b1010 N
b1010 ]
b1010 {
#61
b1010 Z
b1010 ^
b1010 *"
#81
17
#82
07
#100
b10100 8
b10100 >
b10100 g
#122
17
#123
b10100 T
b10100 h
b10100 ;"
b10100 i
07
#131
b10100 C
b10100 z
b10100 +"
b10100 >"
#133
b10100 I
b10100 k
b10100 ,"
b10100 N
b10100 ]
b10100 {
#143
b10100 Z
b10100 ^
b10100 *"
#163
17
#164
07
#204
17
#205
07
#245
17
#246
07
#286
17
#287
07
#327
17
#328
07
#368
17
#369
07
#409
17
#410
07
#450
17
#451
07
#491
17
#492
07
#532
17
#533
07
#573
17
#574
07
#600
